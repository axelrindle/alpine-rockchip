name: CI

on:
  push:
    branches:
      - main
    tags:
      - v*.*.*
  workflow_dispatch:

jobs:
  build-u-boot:
    name: Build Universal Bootloader
    runs-on: ubuntu-latest
    env:
      ARCH: arm
      CROSS_COMPILE: aarch64-linux-gnu-
      ROCKCHIP_TPL: ${{ github.workspace }}/rkbin/bin/rk35/rk3588_ddr_lp4_2112MHz_lp5_2400MHz_v1.18.bin
      BL31: ${{ github.workspace }}/rkbin/bin/rk35/rk3588_bl31_v1.47.elf
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ github.token }}
          repository: u-boot/u-boot
          path: u-boot
          ref: v2025.01
          fetch-depth: 1
      - uses: actions/checkout@v4
        with:
          token: ${{ github.token }}
          repository: rockchip-linux/rkbin
          path: rkbin
          ref: 0f8ac860f0479da56a1decae207ddc99e289f2e2
          fetch-depth: 1
      - uses: actions/checkout@v4
        with:
          path: _custom

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get -y install \
            gcc \
            gcc-aarch64-linux-gnu \
            bc \
            bison \
            coccinelle \
            device-tree-compiler \
            dfu-util \
            efitools \
            flex \
            gdisk \
            graphviz \
            imagemagick \
            liblz4-tool \
            libgnutls28-dev \
            libguestfs-tools \
            libncurses-dev \
            libpython3-dev \
            libsdl2-dev \
            libssl-dev \
            lz4 \
            lzma \
            lzma-alone \
            openssl \
            pkg-config \
            python3 \
            python3-asteval \
            python3-coverage \
            python3-filelock \
            python3-pkg-resources \
            python3-pycryptodome \
            python3-pyelftools \
            python3-pytest \
            python3-pytest-xdist \
            python3-sphinxcontrib.apidoc \
            python3-sphinx-rtd-theme \
            python3-subunit \
            python3-testtools \
            python3-virtualenv \
            swig \
            uuid-dev

      - name: Make config
        working-directory: u-boot
        run: |
          make turing-rk1-rk3588_defconfig

      - name: Make u-boot
        working-directory: u-boot
        run: |
          make -j$(nproc)

      - name: Make boot config
        run: |
          ./u-boot/tools/mkimage -T script -d ./_custom/cmdline.txt boot.scr

      - name: Prepare artifacts
        run: |
          cp ./u-boot/idbloader.img .
          cp ./u-boot/u-boot.itb .

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: u-boot
          path: |
            idbloader.img
            u-boot.itb
            boot.scr

  build-kernel:
    name: Build Linux Kernel
    runs-on: ubuntu-latest
    env:
      ARCH: arm64
      CROSS_COMPILE: aarch64-linux-gnu-
    steps:
      - uses: actions/checkout@v4
        with:
          repository: torvalds/linux
          ref: v6.12
          fetch-depth: 1

      - uses: actions/checkout@v4
        with:
          path: _custom

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get -y install \
            gcc \
            gcc-aarch64-linux-gnu \
            bison \
            flex \
            git \
            bc \
            linux-source \
            libncurses-dev

      - name: Install config
        run: |
          cp _custom/.config .config

      - name: Make kernel
        run: |
          make -j$(nproc) olddefconfig
          make -j$(nproc)
          make -j$(nproc) dtbs

      - name: Prepare artifacts
        run: |
          cp arch/arm64/boot/Image .
          cp arch/arm64/boot/dts/rockchip/rk3588-turing-rk1.dtb .

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: kernel
          path: |
            Image
            rk3588-turing-rk1.dtb

  build-bootable-imabe:
    name: Build bootable Image
    runs-on: ubuntu-latest
    needs:
      - build-u-boot
      - build-kernel
    steps:
      - uses: actions/checkout@v4

      - uses: actions/download-artifact@v4
        with:
          merge-multiple: true

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get -y install \
            fdisk

      - name: Create empty image file
        run: |
          dd if=/dev/zero of=alpine.img bs=1M count=150

      - name: Apply sfdisk layout
        run: |
          /sbin/sfdisk alpine.img < layout.sfdisk

      - name: Create loopdevice
        run: |
          echo "LOOP_DEVICE=$(sudo losetup -Pf --show alpine.img)" >> "$GITHUB_ENV"

      - name: Mount image
        run: |
          sudo mkfs.fat -F 32 "${LOOP_DEVICE}p1"
          sudo mkfs.ext4 "${LOOP_DEVICE}p2"
          mkdir -p mnt/{boot,root}
          sudo mount "${LOOP_DEVICE}p1" mnt/boot/
          sudo mount "${LOOP_DEVICE}p2" mnt/root/

      - name: Copy boot files
        run: |
          sudo cp idbloader.img mnt/boot/
          sudo cp u-boot.itb mnt/boot/
          sudo cp boot.scr mnt/boot/
          sudo cp Image mnt/boot/

      - name: Install rootfs
        working-directory: mnt/root
        run: |
          sudo wget https://dl-cdn.alpinelinux.org/alpine/v3.20/releases/aarch64/alpine-minirootfs-3.20.3-aarch64.tar.gz
          sudo tar xvf alpine-minirootfs-3.20.3-aarch64.tar.gz
          sudo rm alpine-minirootfs-3.20.3-aarch64.tar.gz

      - name: Cleanup
        run: |
          sudo umount mnt/boot/
          sudo umount mnt/root/
          sudo losetup -d "${LOOP_DEVICE}"

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: image
          path: |
            alpine.img

  release:
    if: startsWith(github.ref, 'refs/tags/')
    name: Publish release
    runs-on: ubuntu-latest
    permissions:
      contents: write
    needs:
      - build-bootable-imabe
    steps:
      - uses: actions/download-artifact@v4
        with:
          merge-multiple: true

      - uses: softprops/action-gh-release@v2
        with:
          generate_release_notes: false
          files: |
            alpine.img

